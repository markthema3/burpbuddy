{"name":"Burpbuddy","tagline":"burpbuddy exposes Burp Suites's extender API over the network through various mediums, with the goal of enabling development in any language without the restrictions of the JVM","body":"burpbuddy\r\n=========\r\n\r\nburpbuddy exposes [Burp Suites's](http://portswigger.net/burp/) extender API over the network through various mediums, with the goal of enabling development in any language without the restrictions of the JVM. See the documentation below and [examples](https://github.com/liftsecurity/burpbuddy/tree/master/examples) for more information.\r\n\r\n## Requirements\r\n- Java 8\r\n- [BurpSuite](http://portswigger.net/burp/)\r\n\r\n## Releases\r\nA compiled and packaged Jar file is available [here](https://github.com/liftsecurity/burpbuddy/releases/download/v2.1.0/burpbuddy-2.1.0.jar).\r\n\r\n## Build instructions for development or bleeding edge\r\n### OSX\r\n1. ```brew install maven```\r\n1. Install Java 8 \r\n1. Clone this repo\r\n1. ```cd burp```\r\n1. ```export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home```\r\n1. ```mvn package```\r\n1. ```cd target```\r\n1. copy burpbuddy-0.1-SNAPSHOT.jar where/you/put/burp/stuff\r\n\r\n## Security\r\nThe WebSocket Server and HTTP API are protected from CSRF. With the exception that the WebSocket Server allows an origin of `*` by default, which can be modified once you know the domain structure of your connection. We did this because it's very difficult to come up with all the possible combinations that can occur across different mediums. Currently, we do not provide any means of authentication. By default, the servers all listen on localhost.\r\n\r\nIf you identify a vulnerability, please report it to us security@liftsecurity.io and we will work with you to resolve it. Thanks!\r\n\r\n## WebSocket Server\r\nA WebSocket server is available to ingest streaming events from burp. Currently this includes requests, responses, and scan issues. Use the `messageType` field to distinguish between each of these. Sometimes it may appear that duplicate events are being emmited, this is because burp is emitting for different tools (proxy, spider, etc). Use the `toolFlag` parameter to differentiate between these. Also, `highlight` and `comment` fields will be tool dependent.\r\n\r\n### Messages\r\nAll messages are sent as JSON.\r\n#### request\r\n- host (string)\r\n- port (int)\r\n- protocol (string)\r\n- url (string)\r\n- path (string)\r\n- query (string)\r\n- httpVersion (string)\r\n- method (string)\r\n- headers (object) - key/value pairs of strings\r\n- body (string) - base64 encoded string of the request body\r\n- raw (string) - base64 encoded string of the entire request\r\n- inScope (bool) - true if the url is in the current burp scope\r\n- highlight (string)\r\n- comment (string)\r\n- toolFlag (int)\r\n- messageType (string) - set to `request`\r\n\r\n#### response\r\n- host (string)\r\n- port (int)\r\n- protocol (string)\r\n- headers (object) - key/value pairs of strings\r\n- cookies (array) - array of cookie objects\r\n- mimeType (string)\r\n- body (string) - base64 encoded string of the response body\r\n- raw (string) - base64 encoded string of the entire response\r\n- inScope (bool) - true if url is in the current burp scope\r\n- highlight (string)\r\n- comment (string)\r\n- toolFlag (int)\r\n- messageType (string) - set to `response`\r\n\r\n#### scanIssue\r\n- host (string)\r\n- port (int)\r\n- protocol (string)\r\n- name (string)\r\n- issueType (int)\r\n- severity (string)\r\n- confidence (string)\r\n- issueBackground (string)\r\n- remediationBackground (string)\r\n- issueDetail (string)\r\n- remediationDetail (string)\r\n- requestResponses (array) - array of request/response pairs\r\n- inScope (bool) - true if url is in the current burp scope\r\n- messageType (string) - set to `scanIssue`\r\n\r\n#### requestResponse\r\nThis combines the request and response message into a single object. It's created by implementing a scanner check that always returns null.\r\n- request (request)\r\n- response (response)\r\n- messageType (string) - set to `requestResponse`\r\n\r\n## Request hook\r\nA URL can be configured to hook into burp's proxy processing. On every request, this URL will receive a POST containing a JSON body exactly like in the socket stream. A JSON response is expected from this request with the exact same fields. Certain fields can be modified to alter the request before burp sends it along the proxy chain, which will eventually go to the server. The following fields can be used to modify the request:\r\n\r\n- host\r\n- port\r\n- protocol\r\n- httpVersion\r\n- method\r\n- path\r\n- query\r\n- headers\r\n- body\r\n- comment\r\n- highlight\r\n- referenceID\r\n\r\nThe `referenceID` field may be used to track requests and response pairs.\r\n\r\n## Response Hook\r\nSimilarly, a URL can be configured to hook into burp's response processing. On every response, this URL will receive a POST containing a JSON body exactly like in the socket stream. A JSON response is expected with the exact same fields. Only the `raw` field can be modified to alter the content of the response. This is a bit of a pain, but the alternative is for the extension to implement magic and build a response for you. In most cases, users will want to transform the byte array into a string, perform some sort of match and replace, and then transform back into a byte array. Other fields below can be modified as well to alter burp's presentation of the response:\r\n- raw\r\n- comment\r\n- highlight\r\n- referenceID\r\n\r\nThe `referenceID` field may be used to track requests and response pairs.\r\n\r\n## HTTP API\r\nVirtually every method call in the burp extender API is exposed via HTTP. The following is a list of paths and required formats. All non `GET` requests must have a content-type of `application/json`.\r\n\r\n### GET /scope/{url}\r\n`url` should be a base64 encoded URL. The response will be `200` for a URL that is in burp's current scope and `404` for one that is not.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scope/aHR0cDovL3N0YWNrdGl0YW4uY29tLw==\r\nHTTP/1.1 200 OK\r\n\r\n$ curl -i http://localhost:8001/scope/aHR0cDovL3N0YWNrdGl0YW4uY2\r\nHTTP/1.1 404 Not Found\r\n```\r\n\r\n### POST /scope\r\nThe provided URL is added to burp's scope.\r\n\r\nRequired Fields:\r\n```\r\nurl: string\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scope -X POST -H 'Content-type: application/json' -d '{\"url\": \"http://liftsecurity.io\"}'\r\nHTTP/1.1 201 Created\r\n\r\n{\"url\":\"http://liftsecurity.io\"}\r\n```\r\n\r\n### DELETE /scope/{url}\r\n`url` should be a base64 encoded URL to remove from burp's scope.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scope/aHR0cDovL3Rlc3Rhc3AudnVsbndlYi5jb20v -X DELETE -H \"content-type: application/json\"\r\nHTTP/1.1 204 No Content\r\n\r\n```\r\n\r\n### GET /scanissues\r\nGet a list of all scan issues.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scanissues\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\n\r\n\r\n{\"data\":[]}\r\n```\r\n\r\n### GET /scanissues/{url}\r\nGiven a base64 encoded URL, return the scan issues for that URL.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scanissues/aHR0cDovL3N0YWNrdGl0YW4uY29tLw==\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\nContent-Length: 11\r\nServer: Jetty(9.0.z-SNAPSHOT)\r\n\r\n{\"data\":[]}\r\n```\r\n\r\n### POST /scanissues\r\nAdd a new issue.\r\n\r\nRequired Fields:\r\n```\r\nurl: string\r\nhost: string\r\nport: int\r\nprotocol: http\r\nname: string\r\nissueType: int\r\nseverity: string\r\nconfidence: string\r\nissueBackground: string\r\nremediationBackground: string\r\nissueDetail: string\r\nremediationDetail: string\r\nrequestResposnes: array of request/response pairs. See POST /scan/passive for format.\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scanissues -X POST -H 'Content-Type: application/json' -d '{\"url\": \"http://liftsecurity.io\", \"host\": \"liftsecurity.io\", \"port\": 4444, \"protocol\": \"http\", \"name\": \"Hello World\", \"issueType\": 134217728, \"severity\": \"Information\", \"confidence\": \"Certain\", \"issueBackground\": \"beep\", \"remediationBackground\": \"boop\", \"issueDetail\": \"foo\", \"remediationDetail\": \"bar\", \"requestResponses\":[{\"request\": { \"host\": \"liftsecurity.io\", \"port\": 4444, \"protocol\": \"http\", \"raw\": \"R0VUIC8gSFRUUDEuMQ==\"}, \"response\": {\"host\": \"liftsecurity.io\", \"port\": 4444, \"protocol\": \"http\", \"raw\": \"SFRUUCAyMDAgT0s=\"}}]}'\r\nHTTP/1.1 201 Created\r\nContent-Type: application/json; charset=UTF8\r\nContent-Length: 661\r\nServer: Jetty(9.0.z-SNAPSHOT)\r\n\r\n{\"url\":\"http://liftsecurity.io\",\"host\":\"liftsecurity.io\",\"port\":4444,\"protocol\":\"http\",\"name\":\"Hello World\",\"issueType\":134217728,\"severity\":\"Information\",\"confidence\":\"Certain\",\"issueBackground\":\"beep\",\"remediationBackground\":\"boop\",\"issueDetail\":\"foo\",\"remediationDetail\":\"bar\",\"requestResponses\":[{\"request\":{\"host\":\"liftsecurity.io\",\"port\":4444,\"protocol\":\"http\",\"httpVersion\":\"HTTP/1.1\",\"raw\":\"R0VUIC8gSFRUUDEuMQ\\u003d\\u003d\",\"inScope\":false,\"toolFlag\":16962,\"referenceID\":0},\"response\":{\"statusCode\":0,\"raw\":\"SFRUUCAyMDAgT0s\\u003d\",\"host\":\"liftsecurity.io\",\"protocol\":\"http\",\"port\":4444,\"inScope\":false,\"toolFlag\":16962,\"referenceID\":0}}],\"inScope\":false}\r\n```\r\n\r\nResources:\r\n- [Issue Types](http://portswigger.net/burp/help/scanner_issuetypes.html)\r\n\r\n### POST /spider\r\nSend a URL to spider.\r\nRequired Fields:\r\n```\r\nurl: string\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/spider -X POST -H 'Content-Type: application/json' -d '{\"url\": \"http://liftsecurity.io/\"}'\r\nHTTP/1.1 201 Created\r\n```\r\n\r\n### GET /jar\r\nGet a list of all of the cookies in the cookie jar.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/jar\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\n\r\n{\"data\":[{\"domain\":\"liftsecurity.io\",\"name\":\"SID\",\"value\":\"192891pj2ijf90u129\", \"expiration\":\"Oct 15, 2014 9:09:44 AM\"}]}\r\n```\r\n\r\n### POST /jar\r\nAdd a cookie to the cookie jar.\r\n\r\nRequired Fields:\r\n```\r\ndomain: string\r\nexpiration: string // In Date format\r\nname: string\r\nvalue: string\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/jar -X POST -H 'Content-Type: application/json' -d '{\"domain\":\"liftsecurity.io\",\"name\":\"SID\",\"value\":\"192891pj2ijf90u129\", \"expiration\":\"Oct 15, 2014 9:09:44 AM\"}'\r\nHTTP/1.1 201 Created\r\nContent-Type: application/json; charset=UTF8\r\n\r\n{\"domain\":\"liftsecurity.io\",\"expiration\":\"Oct 15, 2014 9:09:44 AM\",\"name\":\"SID\",\"value\":\"192891pj2ijf90u129\"}\r\n```\r\n\r\n### POST /scan/active\r\nSend a request to the active scanner.\r\n\r\nRequired Fields:\r\n```\r\nhost: string\r\nport: int\r\nuseHttps: bool\r\nrequest: string(base64)\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scan/active -X POST -H 'Content-Type: application/json' -d '{\"host\": \"stacktitan.com\", \"port\": 80, \"useHttps\": false, \"request\": \"R0VUIC8gSFRUUC8xLjENCkhvc3Q6IHN0YWNrdGl0YW4uY29tDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=\"}'\r\nHTTP/1.1 201 Created\r\n```\r\n\r\n### GET /scan/active/{id}\r\nGet scan item `id` from the active queue.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scan/active/1\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\n\r\n{\"id\":1,\"errors\":0,\"insertionPointCount\":3,\"requestCount\":70,\"status\":\"finished\",\"percentComplete\":100,\"issues\":[]}\r\n```\r\n\r\n### DELETE /scan/active/{id}\r\nDelete a scan item `id` from the active queue.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/scan/active/1 -X DELETE -H 'Content-Type: application/json'\r\nHTTP/1.1 204 No Content\r\nContent-Type: application/json; charset=UTF8\r\n```\r\n\r\n### POST /scan/passive\r\nSend a request/response to the passive scanner for analysis.\r\n\r\nRequired Fields:\r\n```\r\nhost: string\r\nport: int\r\nuseHttps: bool\r\nrequest: string (base64)\r\nresponse: string (base64)\r\n```\r\n\r\nExample:\r\n```\r\ncurl -i http://localhost:8001/scan/passive -X POST -H 'Content-Type: application/json' -d '{\"host\": \"liftsecurity.io\", \"port\": 443, \"useHttps\": true, \"request\": \"R0VUIC8gSFRUUDEuMQ==\", \"response\": \"SFRUUCAyMDAgT0s=\"}'\r\nHTTP/1.1 201 Created\r\nContent-Type: application/json; charset=UTF8\r\n```\r\n\r\n### POST /send/{tool}\r\nSend a request to repeater or intruder, provided as `tool`.\r\n\r\nRequired Fields:\r\n```\r\nhost: string\r\nport: int\r\nuseHttps: bool\r\nrequest: string (base64)\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/send/intruder -X POST -H 'Content-Type: application/json' -d '{\"host\": \"liftsecurity.io\", \"port\": 443, \"useHttps\": true, \"request\": \"R0VUIC8gSFRUUDEuMQ==\"}'\r\nHTTP/1.1 201 Created\r\nContent-Type: application/json; charset=UTF8\r\n```\r\n\r\n### POST /alert\r\nCreate an alert.\r\n\r\nRequired Fields:\r\n```\r\nmessage: string\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/alert -X POST -H 'Content-Type: application/json' -d '{\"message\": \"exterminate!\"}'\r\nHTTP/1.1 201 Created\r\nContent-Type: application/json; charset=UTF8\r\n```\r\n\r\n### GET /sitemap\r\nGet the contents of burp's sitemap\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/sitemap\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\n\r\n{\"data\":[]}\r\n```\r\n\r\n### GET /sitemap/{url}\r\nGet the contents of burp's sitemap containing the provied base64 encoded URL.\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/sitemap/aHR0cHM6Ly9saWZ0c2VjdXJpdHkuaW8v\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\nTransfer-Encoding: chunked\r\nServer: Jetty(9.0.z-SNAPSHOT)\r\n\r\n{\"data\":[]}\r\n```\r\n\r\n### POST /sitemap\r\nAdd a request/response to the sitemap.\r\n\r\nRequired Fields:\r\n```\r\nrequest: \r\n    raw: string (base64)\r\n    comment: string\r\n    highlight: string\r\n    host: string\r\n    port: int\r\n    protocol: string\r\n\r\nresponse:\r\n    raw: string (base64)\r\n```\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/sitemap -X POST -H 'Content-Type: application/json' -d '{\"request\": {\"host\": \"liftsecurity.io\", \"port\": 443, \"protocol\": \"https\", \"highlight\": \"red\", \"comment\": \"woohoo\", \"raw\": \"R0VUIC8gSFRUUDEuMQ==\"}, \"response\": {\"raw\": \"SFRUUC8xLjEgMjAwIE9LXHJcblxyXG4=\"}}'\r\nHTTP/1.1 201 Created\r\nContent-Type: application/json; charset=UTF8\r\n\r\n{\"request\":{\"host\":\"liftsecurity.io\",\"port\":443,\"protocol\":\"https\",\"highlight\":\"red\",\"comment\":\"woohoo\",\"httpVersion\":\"HTTP/1.1\",\"raw\":\"R0VUIC8gSFRUUDEuMQ\\u003d\\u003d\",\"inScope\":false,\"toolFlag\":16962,\"referenceID\":0},\"response\":{\"statusCode\":0,\"raw\":\"SFRUUC8xLjEgMjAwIE9LXHJcblxyXG4\\u003d\",\"port\":0,\"inScope\":false,\"toolFlag\":16962,\"referenceID\":0}}\r\n```\r\n\r\nKnown Issues:\r\n- Highlight is not getting set within burp, this appears to be an issue with the extender API\r\n\r\n### GET /proxyhistory\r\nGet all the request/response pairs from burp's proxy history\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/proxyhistory\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF8\r\n\r\n{\"data\":[]}\r\n```\r\n\r\n### GET /state\r\nDownload the current burp state\r\n\r\nExample:\r\n```\r\n$ curl -i http://localhost:8001/state\r\nHTTP/1.1 200 OK\r\nContent-Type: application/octet-stream;charset=UTF-8\r\nContent-Disposition: attachment; filename=burp_state\r\nTransfer-Encoding: chunked\r\n\r\n...data...\r\n```\r\n\r\n### POST /state\r\nRestore state from file. Burp reloads after restoration, so you will receive an empty reply from the server.\r\n```\r\n$ curl -i http://localhost:8001/state -X POST -F file=@restore_state\r\n```\r\n\r\n### POST /proxy/intercept/enable\r\nEnable proxy intercept.\r\n```\r\n$ curl -i http://localhost:8001/proxy/intercept/enable -X POST\r\n```\r\n\r\n### POST /proxy/intercept/disable\r\nDisable proxy intercept.\r\n```\r\n$ curl -i http://localhost:8001/proxy/intercept/disable -X POST\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}